// <auto-generated />
using System;
using Deneme.DAL.Base.AppDBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Deneme.DAL.Migrations
{
    [DbContext(typeof(DenemeDbContext))]
    [Migration("20221219214927_init2")]
    partial class init2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Deneme.Entity.Address", b =>
                {
                    b.Property<Guid>("SubscriberId")
                        .HasColumnType("uuid");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("SubscriberId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Deneme.Entity.Subscriber", b =>
                {
                    b.Property<Guid>("SubscriberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("RegisterationDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SubscriberId");

                    b.ToTable("Subscribers");
                });

            modelBuilder.Entity("Deneme.Entity.Address", b =>
                {
                    b.HasOne("Deneme.Entity.Subscriber", "Subscriber")
                        .WithOne("Address")
                        .HasForeignKey("Deneme.Entity.Address", "SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscriber");
                });

            modelBuilder.Entity("Deneme.Entity.Subscriber", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
